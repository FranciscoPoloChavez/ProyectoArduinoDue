
ArduinoDue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010a0  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000570  20070000  000810a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000b4  20070570  00081610  00020570  2**2
                  ALLOC
  3 .stack        00002004  20070624  000816c4  00020570  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020599  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000f511  00000000  00000000  000205f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001eaa  00000000  00000000  0002fb03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000032ce  00000000  00000000  000319ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000698  00000000  00000000  00034c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000630  00000000  00000000  00035313  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000443c  00000000  00000000  00035943  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000095a6  00000000  00000000  00039d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000608d2  00000000  00000000  00043325  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000ea8  00000000  00000000  000a3bf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	28 26 07 20 19 06 08 00 15 06 08 00 15 06 08 00     (&. ............
   80010:	15 06 08 00 15 06 08 00 15 06 08 00 00 00 00 00     ................
	...
   8002c:	15 06 08 00 15 06 08 00 00 00 00 00 15 06 08 00     ................
   8003c:	15 06 08 00 15 06 08 00 15 06 08 00 15 06 08 00     ................
   8004c:	15 06 08 00 15 06 08 00 15 06 08 00 15 06 08 00     ................
   8005c:	15 06 08 00 15 06 08 00 15 06 08 00 00 00 00 00     ................
   8006c:	4d 03 08 00 61 03 08 00 75 03 08 00 89 03 08 00     M...a...u.......
	...
   80084:	15 06 08 00 15 06 08 00 15 06 08 00 15 06 08 00     ................
   80094:	15 06 08 00 15 06 08 00 15 06 08 00 15 06 08 00     ................
   800a4:	00 00 00 00 15 06 08 00 15 06 08 00 15 06 08 00     ................
   800b4:	15 06 08 00 15 06 08 00 15 06 08 00 15 06 08 00     ................
   800c4:	15 06 08 00 15 06 08 00 15 06 08 00 15 06 08 00     ................
   800d4:	bd 0a 08 00 15 06 08 00 15 06 08 00 15 06 08 00     ................
   800e4:	15 06 08 00 15 06 08 00 15 06 08 00 15 06 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070570 	.word	0x20070570
   80110:	00000000 	.word	0x00000000
   80114:	000810a0 	.word	0x000810a0

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000810a0 	.word	0x000810a0
   80154:	20070574 	.word	0x20070574
   80158:	000810a0 	.word	0x000810a0
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80160:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80162:	2401      	movs	r4, #1
   80164:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80166:	2400      	movs	r4, #0
   80168:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8016a:	f240 2502 	movw	r5, #514	; 0x202
   8016e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80172:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80176:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8017a:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8017c:	0052      	lsls	r2, r2, #1
   8017e:	fbb1 f2f2 	udiv	r2, r1, r2
   80182:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80184:	0212      	lsls	r2, r2, #8
   80186:	b292      	uxth	r2, r2
   80188:	432b      	orrs	r3, r5
   8018a:	431a      	orrs	r2, r3
   8018c:	6042      	str	r2, [r0, #4]
	return 0;
}
   8018e:	4620      	mov	r0, r4
   80190:	bc30      	pop	{r4, r5}
   80192:	4770      	bx	lr

00080194 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80194:	6843      	ldr	r3, [r0, #4]
   80196:	f023 0310 	bic.w	r3, r3, #16
   8019a:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   8019c:	6843      	ldr	r3, [r0, #4]
   8019e:	4319      	orrs	r1, r3
   801a0:	6041      	str	r1, [r0, #4]
   801a2:	4770      	bx	lr

000801a4 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   801a4:	6843      	ldr	r3, [r0, #4]
   801a6:	01d2      	lsls	r2, r2, #7
   801a8:	b2d2      	uxtb	r2, r2
   801aa:	4319      	orrs	r1, r3
   801ac:	430a      	orrs	r2, r1
   801ae:	6042      	str	r2, [r0, #4]
   801b0:	4770      	bx	lr

000801b2 <adc_configure_sequence>:
 * \param ch_list Channel sequence list.
 * \param number Number of channels in the list.
 */
void adc_configure_sequence(Adc *p_adc, const enum adc_channel_num_t ch_list[],
		uint8_t uc_num)
{
   801b2:	b470      	push	{r4, r5, r6}
	uint8_t uc_counter;
	volatile uint32_t *adc_seqr = &p_adc->ADC_SEQR1;

	if (uc_num <= 8) {
   801b4:	2a08      	cmp	r2, #8
   801b6:	d810      	bhi.n	801da <adc_configure_sequence+0x28>
		for (uc_counter = 0; uc_counter < uc_num; uc_counter++) {
   801b8:	b16a      	cbz	r2, 801d6 <adc_configure_sequence+0x24>
   801ba:	1e4c      	subs	r4, r1, #1
   801bc:	3a01      	subs	r2, #1
   801be:	b2d2      	uxtb	r2, r2
   801c0:	4411      	add	r1, r2
   801c2:	2200      	movs	r2, #0
			adc_seqr[0] |=
   801c4:	6885      	ldr	r5, [r0, #8]
					ch_list[uc_counter] << (4 * uc_counter);
   801c6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   801ca:	4093      	lsls	r3, r2
			adc_seqr[0] |=
   801cc:	432b      	orrs	r3, r5
   801ce:	6083      	str	r3, [r0, #8]
   801d0:	3204      	adds	r2, #4
		for (uc_counter = 0; uc_counter < uc_num; uc_counter++) {
   801d2:	42a1      	cmp	r1, r4
   801d4:	d1f6      	bne.n	801c4 <adc_configure_sequence+0x12>
		for (uc_counter = 0; uc_counter < uc_num - 8; uc_counter++) {
			adc_seqr[1] |=
					ch_list[8 + uc_counter] << (4 * uc_counter);
		}
	}
}
   801d6:	bc70      	pop	{r4, r5, r6}
   801d8:	4770      	bx	lr
   801da:	1e4d      	subs	r5, r1, #1
	if (uc_num <= 8) {
   801dc:	2400      	movs	r4, #0
			adc_seqr[0] |=
   801de:	6886      	ldr	r6, [r0, #8]
					ch_list[uc_counter] << (4 * uc_counter);
   801e0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   801e4:	40a3      	lsls	r3, r4
			adc_seqr[0] |=
   801e6:	4333      	orrs	r3, r6
   801e8:	6083      	str	r3, [r0, #8]
   801ea:	3404      	adds	r4, #4
		for (uc_counter = 0; uc_counter < 8; uc_counter++) {
   801ec:	2c20      	cmp	r4, #32
   801ee:	d1f6      	bne.n	801de <adc_configure_sequence+0x2c>
		for (uc_counter = 0; uc_counter < uc_num - 8; uc_counter++) {
   801f0:	3a08      	subs	r2, #8
   801f2:	2a00      	cmp	r2, #0
   801f4:	ddef      	ble.n	801d6 <adc_configure_sequence+0x24>
   801f6:	2500      	movs	r5, #0
   801f8:	462b      	mov	r3, r5
			adc_seqr[1] |=
   801fa:	68c6      	ldr	r6, [r0, #12]
					ch_list[8 + uc_counter] << (4 * uc_counter);
   801fc:	194c      	adds	r4, r1, r5
   801fe:	7a24      	ldrb	r4, [r4, #8]
   80200:	00ad      	lsls	r5, r5, #2
   80202:	40ac      	lsls	r4, r5
			adc_seqr[1] |=
   80204:	4334      	orrs	r4, r6
   80206:	60c4      	str	r4, [r0, #12]
		for (uc_counter = 0; uc_counter < uc_num - 8; uc_counter++) {
   80208:	3301      	adds	r3, #1
   8020a:	b2db      	uxtb	r3, r3
   8020c:	461d      	mov	r5, r3
   8020e:	4293      	cmp	r3, r2
   80210:	dbf3      	blt.n	801fa <adc_configure_sequence+0x48>
   80212:	e7e0      	b.n	801d6 <adc_configure_sequence+0x24>

00080214 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80214:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80216:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80218:	0609      	lsls	r1, r1, #24
   8021a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8021e:	4321      	orrs	r1, r4
   80220:	430a      	orrs	r2, r1
   80222:	0719      	lsls	r1, r3, #28
   80224:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
   80228:	4311      	orrs	r1, r2
   8022a:	6041      	str	r1, [r0, #4]
}
   8022c:	bc10      	pop	{r4}
   8022e:	4770      	bx	lr

00080230 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80230:	2302      	movs	r3, #2
   80232:	6003      	str	r3, [r0, #0]
   80234:	4770      	bx	lr

00080236 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80236:	2301      	movs	r3, #1
   80238:	fa03 f101 	lsl.w	r1, r3, r1
   8023c:	6101      	str	r1, [r0, #16]
   8023e:	4770      	bx	lr

00080240 <adc_disable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_disable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHDR = 1 << adc_ch;
   80240:	2301      	movs	r3, #1
   80242:	fa03 f101 	lsl.w	r1, r3, r1
   80246:	6141      	str	r1, [r0, #20]
   80248:	4770      	bx	lr

0008024a <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   8024a:	6a00      	ldr	r0, [r0, #32]
}
   8024c:	4770      	bx	lr

0008024e <adc_enable_tag>:
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_enable_tag(Adc *p_adc)
{
	p_adc->ADC_EMR |= ADC_EMR_TAG;
   8024e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80250:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   80254:	6403      	str	r3, [r0, #64]	; 0x40
   80256:	4770      	bx	lr

00080258 <adc_start_sequencer>:
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_start_sequencer(Adc *p_adc)
{
	p_adc->ADC_MR |= ADC_MR_USEQ;
   80258:	6843      	ldr	r3, [r0, #4]
   8025a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8025e:	6043      	str	r3, [r0, #4]
   80260:	4770      	bx	lr

00080262 <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
   80262:	6241      	str	r1, [r0, #36]	; 0x24
   80264:	4770      	bx	lr

00080266 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80266:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   80268:	4770      	bx	lr

0008026a <adc_set_bias_current>:
 * \param p_adc Pointer to an ADC instance.
 * \param ibctl ADC Bias current control.
 */
void adc_set_bias_current(Adc *p_adc, const uint8_t uc_ibctl)
{
	p_adc->ADC_ACR |= ADC_ACR_IBCTL(uc_ibctl);
   8026a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   8026e:	0209      	lsls	r1, r1, #8
   80270:	f401 7140 	and.w	r1, r1, #768	; 0x300
   80274:	4319      	orrs	r1, r3
   80276:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
   8027a:	4770      	bx	lr

0008027c <adc_disable_ts>:
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_disable_ts(Adc *p_adc)
{
	p_adc->ADC_ACR &= ~ADC_ACR_TSON;
   8027c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   80280:	f023 0310 	bic.w	r3, r3, #16
   80284:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
   80288:	4770      	bx	lr
	...

0008028c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8028c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80290:	4604      	mov	r4, r0
   80292:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80294:	4b0e      	ldr	r3, [pc, #56]	; (802d0 <pio_handler_process+0x44>)
   80296:	4798      	blx	r3
   80298:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8029a:	4620      	mov	r0, r4
   8029c:	4b0d      	ldr	r3, [pc, #52]	; (802d4 <pio_handler_process+0x48>)
   8029e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   802a0:	4005      	ands	r5, r0
   802a2:	d013      	beq.n	802cc <pio_handler_process+0x40>
   802a4:	4c0c      	ldr	r4, [pc, #48]	; (802d8 <pio_handler_process+0x4c>)
   802a6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   802aa:	e003      	b.n	802b4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   802ac:	42b4      	cmp	r4, r6
   802ae:	d00d      	beq.n	802cc <pio_handler_process+0x40>
   802b0:	3410      	adds	r4, #16
		while (status != 0) {
   802b2:	b15d      	cbz	r5, 802cc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   802b4:	6820      	ldr	r0, [r4, #0]
   802b6:	4540      	cmp	r0, r8
   802b8:	d1f8      	bne.n	802ac <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   802ba:	6861      	ldr	r1, [r4, #4]
   802bc:	4229      	tst	r1, r5
   802be:	d0f5      	beq.n	802ac <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   802c0:	68e3      	ldr	r3, [r4, #12]
   802c2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   802c4:	6863      	ldr	r3, [r4, #4]
   802c6:	ea25 0503 	bic.w	r5, r5, r3
   802ca:	e7ef      	b.n	802ac <pio_handler_process+0x20>
   802cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802d0:	0008048b 	.word	0x0008048b
   802d4:	0008048f 	.word	0x0008048f
   802d8:	2007058c 	.word	0x2007058c

000802dc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   802dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   802de:	4c18      	ldr	r4, [pc, #96]	; (80340 <pio_handler_set+0x64>)
   802e0:	6826      	ldr	r6, [r4, #0]
   802e2:	2e06      	cmp	r6, #6
   802e4:	d829      	bhi.n	8033a <pio_handler_set+0x5e>
   802e6:	f04f 0c00 	mov.w	ip, #0
   802ea:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   802ec:	4f15      	ldr	r7, [pc, #84]	; (80344 <pio_handler_set+0x68>)
   802ee:	e004      	b.n	802fa <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   802f0:	3401      	adds	r4, #1
   802f2:	b2e4      	uxtb	r4, r4
   802f4:	46a4      	mov	ip, r4
   802f6:	42a6      	cmp	r6, r4
   802f8:	d309      	bcc.n	8030e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   802fa:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   802fc:	0125      	lsls	r5, r4, #4
   802fe:	597d      	ldr	r5, [r7, r5]
   80300:	428d      	cmp	r5, r1
   80302:	d1f5      	bne.n	802f0 <pio_handler_set+0x14>
   80304:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   80308:	686d      	ldr	r5, [r5, #4]
   8030a:	4295      	cmp	r5, r2
   8030c:	d1f0      	bne.n	802f0 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   8030e:	4d0d      	ldr	r5, [pc, #52]	; (80344 <pio_handler_set+0x68>)
   80310:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   80314:	eb05 040e 	add.w	r4, r5, lr
   80318:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   8031c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   8031e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   80320:	9906      	ldr	r1, [sp, #24]
   80322:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   80324:	3601      	adds	r6, #1
   80326:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   80328:	bf04      	itt	eq
   8032a:	4905      	ldreq	r1, [pc, #20]	; (80340 <pio_handler_set+0x64>)
   8032c:	600e      	streq	r6, [r1, #0]
   8032e:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80330:	461a      	mov	r2, r3
   80332:	4b05      	ldr	r3, [pc, #20]	; (80348 <pio_handler_set+0x6c>)
   80334:	4798      	blx	r3

	return 0;
   80336:	2000      	movs	r0, #0
   80338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   8033a:	2001      	movs	r0, #1
}
   8033c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8033e:	bf00      	nop
   80340:	200705fc 	.word	0x200705fc
   80344:	2007058c 	.word	0x2007058c
   80348:	00080459 	.word	0x00080459

0008034c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8034c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8034e:	210b      	movs	r1, #11
   80350:	4801      	ldr	r0, [pc, #4]	; (80358 <PIOA_Handler+0xc>)
   80352:	4b02      	ldr	r3, [pc, #8]	; (8035c <PIOA_Handler+0x10>)
   80354:	4798      	blx	r3
   80356:	bd08      	pop	{r3, pc}
   80358:	400e0e00 	.word	0x400e0e00
   8035c:	0008028d 	.word	0x0008028d

00080360 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80360:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80362:	210c      	movs	r1, #12
   80364:	4801      	ldr	r0, [pc, #4]	; (8036c <PIOB_Handler+0xc>)
   80366:	4b02      	ldr	r3, [pc, #8]	; (80370 <PIOB_Handler+0x10>)
   80368:	4798      	blx	r3
   8036a:	bd08      	pop	{r3, pc}
   8036c:	400e1000 	.word	0x400e1000
   80370:	0008028d 	.word	0x0008028d

00080374 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{	
   80374:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80376:	210d      	movs	r1, #13
   80378:	4801      	ldr	r0, [pc, #4]	; (80380 <PIOC_Handler+0xc>)
   8037a:	4b02      	ldr	r3, [pc, #8]	; (80384 <PIOC_Handler+0x10>)
   8037c:	4798      	blx	r3
   8037e:	bd08      	pop	{r3, pc}
   80380:	400e1200 	.word	0x400e1200
   80384:	0008028d 	.word	0x0008028d

00080388 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80388:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8038a:	210e      	movs	r1, #14
   8038c:	4801      	ldr	r0, [pc, #4]	; (80394 <PIOD_Handler+0xc>)
   8038e:	4b02      	ldr	r3, [pc, #8]	; (80398 <PIOD_Handler+0x10>)
   80390:	4798      	blx	r3
   80392:	bd08      	pop	{r3, pc}
   80394:	400e1400 	.word	0x400e1400
   80398:	0008028d 	.word	0x0008028d

0008039c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8039c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8039e:	480e      	ldr	r0, [pc, #56]	; (803d8 <sysclk_init+0x3c>)
   803a0:	4b0e      	ldr	r3, [pc, #56]	; (803dc <sysclk_init+0x40>)
   803a2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   803a4:	213e      	movs	r1, #62	; 0x3e
   803a6:	2000      	movs	r0, #0
   803a8:	4b0d      	ldr	r3, [pc, #52]	; (803e0 <sysclk_init+0x44>)
   803aa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   803ac:	4c0d      	ldr	r4, [pc, #52]	; (803e4 <sysclk_init+0x48>)
   803ae:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   803b0:	2800      	cmp	r0, #0
   803b2:	d0fc      	beq.n	803ae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   803b4:	4b0c      	ldr	r3, [pc, #48]	; (803e8 <sysclk_init+0x4c>)
   803b6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   803b8:	4a0c      	ldr	r2, [pc, #48]	; (803ec <sysclk_init+0x50>)
   803ba:	4b0d      	ldr	r3, [pc, #52]	; (803f0 <sysclk_init+0x54>)
   803bc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   803be:	4c0d      	ldr	r4, [pc, #52]	; (803f4 <sysclk_init+0x58>)
   803c0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   803c2:	2800      	cmp	r0, #0
   803c4:	d0fc      	beq.n	803c0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   803c6:	2010      	movs	r0, #16
   803c8:	4b0b      	ldr	r3, [pc, #44]	; (803f8 <sysclk_init+0x5c>)
   803ca:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   803cc:	4b0b      	ldr	r3, [pc, #44]	; (803fc <sysclk_init+0x60>)
   803ce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   803d0:	4801      	ldr	r0, [pc, #4]	; (803d8 <sysclk_init+0x3c>)
   803d2:	4b02      	ldr	r3, [pc, #8]	; (803dc <sysclk_init+0x40>)
   803d4:	4798      	blx	r3
   803d6:	bd10      	pop	{r4, pc}
   803d8:	0501bd00 	.word	0x0501bd00
   803dc:	200700b1 	.word	0x200700b1
   803e0:	000804f9 	.word	0x000804f9
   803e4:	0008054d 	.word	0x0008054d
   803e8:	0008055d 	.word	0x0008055d
   803ec:	200d3f01 	.word	0x200d3f01
   803f0:	400e0600 	.word	0x400e0600
   803f4:	0008056d 	.word	0x0008056d
   803f8:	00080495 	.word	0x00080495
   803fc:	000806b1 	.word	0x000806b1

00080400 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80400:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80402:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80406:	bf14      	ite	ne
   80408:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8040a:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8040c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80410:	bf14      	ite	ne
   80412:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80414:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80416:	f012 0f02 	tst.w	r2, #2
   8041a:	d107      	bne.n	8042c <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8041c:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80420:	bf18      	it	ne
   80422:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80426:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80428:	6001      	str	r1, [r0, #0]
   8042a:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8042c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80430:	e7f9      	b.n	80426 <pio_set_input+0x26>

00080432 <pio_set_output>:
{
   80432:	b410      	push	{r4}
   80434:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80436:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80438:	b944      	cbnz	r4, 8044c <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   8043a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8043c:	b143      	cbz	r3, 80450 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   8043e:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80440:	b942      	cbnz	r2, 80454 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80442:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80444:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80446:	6001      	str	r1, [r0, #0]
}
   80448:	bc10      	pop	{r4}
   8044a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8044c:	6641      	str	r1, [r0, #100]	; 0x64
   8044e:	e7f5      	b.n	8043c <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80450:	6541      	str	r1, [r0, #84]	; 0x54
   80452:	e7f5      	b.n	80440 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80454:	6301      	str	r1, [r0, #48]	; 0x30
   80456:	e7f5      	b.n	80444 <pio_set_output+0x12>

00080458 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   80458:	f012 0f10 	tst.w	r2, #16
   8045c:	d010      	beq.n	80480 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   8045e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80462:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   80466:	bf14      	ite	ne
   80468:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   8046c:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   80470:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   80474:	bf14      	ite	ne
   80476:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   8047a:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   8047e:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   80480:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80484:	4770      	bx	lr

00080486 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   80486:	6401      	str	r1, [r0, #64]	; 0x40
   80488:	4770      	bx	lr

0008048a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8048a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8048c:	4770      	bx	lr

0008048e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8048e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80490:	4770      	bx	lr
	...

00080494 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80494:	4a17      	ldr	r2, [pc, #92]	; (804f4 <pmc_switch_mck_to_pllack+0x60>)
   80496:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8049c:	4318      	orrs	r0, r3
   8049e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   804a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804a2:	f013 0f08 	tst.w	r3, #8
   804a6:	d10a      	bne.n	804be <pmc_switch_mck_to_pllack+0x2a>
   804a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   804ac:	4911      	ldr	r1, [pc, #68]	; (804f4 <pmc_switch_mck_to_pllack+0x60>)
   804ae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   804b0:	f012 0f08 	tst.w	r2, #8
   804b4:	d103      	bne.n	804be <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   804b6:	3b01      	subs	r3, #1
   804b8:	d1f9      	bne.n	804ae <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   804ba:	2001      	movs	r0, #1
   804bc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   804be:	4a0d      	ldr	r2, [pc, #52]	; (804f4 <pmc_switch_mck_to_pllack+0x60>)
   804c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   804c2:	f023 0303 	bic.w	r3, r3, #3
   804c6:	f043 0302 	orr.w	r3, r3, #2
   804ca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   804cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804ce:	f013 0f08 	tst.w	r3, #8
   804d2:	d10a      	bne.n	804ea <pmc_switch_mck_to_pllack+0x56>
   804d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   804d8:	4906      	ldr	r1, [pc, #24]	; (804f4 <pmc_switch_mck_to_pllack+0x60>)
   804da:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   804dc:	f012 0f08 	tst.w	r2, #8
   804e0:	d105      	bne.n	804ee <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   804e2:	3b01      	subs	r3, #1
   804e4:	d1f9      	bne.n	804da <pmc_switch_mck_to_pllack+0x46>
			return 1;
   804e6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   804e8:	4770      	bx	lr
	return 0;
   804ea:	2000      	movs	r0, #0
   804ec:	4770      	bx	lr
   804ee:	2000      	movs	r0, #0
   804f0:	4770      	bx	lr
   804f2:	bf00      	nop
   804f4:	400e0600 	.word	0x400e0600

000804f8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   804f8:	b9c8      	cbnz	r0, 8052e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   804fa:	4a11      	ldr	r2, [pc, #68]	; (80540 <pmc_switch_mainck_to_xtal+0x48>)
   804fc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   804fe:	0209      	lsls	r1, r1, #8
   80500:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80502:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80506:	f023 0303 	bic.w	r3, r3, #3
   8050a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8050e:	f043 0301 	orr.w	r3, r3, #1
   80512:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80514:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80516:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80518:	f013 0f01 	tst.w	r3, #1
   8051c:	d0fb      	beq.n	80516 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8051e:	4a08      	ldr	r2, [pc, #32]	; (80540 <pmc_switch_mainck_to_xtal+0x48>)
   80520:	6a13      	ldr	r3, [r2, #32]
   80522:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8052a:	6213      	str	r3, [r2, #32]
   8052c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8052e:	4904      	ldr	r1, [pc, #16]	; (80540 <pmc_switch_mainck_to_xtal+0x48>)
   80530:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80532:	4a04      	ldr	r2, [pc, #16]	; (80544 <pmc_switch_mainck_to_xtal+0x4c>)
   80534:	401a      	ands	r2, r3
   80536:	4b04      	ldr	r3, [pc, #16]	; (80548 <pmc_switch_mainck_to_xtal+0x50>)
   80538:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8053a:	620b      	str	r3, [r1, #32]
   8053c:	4770      	bx	lr
   8053e:	bf00      	nop
   80540:	400e0600 	.word	0x400e0600
   80544:	fec8fffc 	.word	0xfec8fffc
   80548:	01370002 	.word	0x01370002

0008054c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8054c:	4b02      	ldr	r3, [pc, #8]	; (80558 <pmc_osc_is_ready_mainck+0xc>)
   8054e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80550:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80554:	4770      	bx	lr
   80556:	bf00      	nop
   80558:	400e0600 	.word	0x400e0600

0008055c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8055c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80560:	4b01      	ldr	r3, [pc, #4]	; (80568 <pmc_disable_pllack+0xc>)
   80562:	629a      	str	r2, [r3, #40]	; 0x28
   80564:	4770      	bx	lr
   80566:	bf00      	nop
   80568:	400e0600 	.word	0x400e0600

0008056c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8056c:	4b02      	ldr	r3, [pc, #8]	; (80578 <pmc_is_locked_pllack+0xc>)
   8056e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80570:	f000 0002 	and.w	r0, r0, #2
   80574:	4770      	bx	lr
   80576:	bf00      	nop
   80578:	400e0600 	.word	0x400e0600

0008057c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8057c:	282c      	cmp	r0, #44	; 0x2c
   8057e:	d81e      	bhi.n	805be <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80580:	281f      	cmp	r0, #31
   80582:	d80c      	bhi.n	8059e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80584:	4b11      	ldr	r3, [pc, #68]	; (805cc <pmc_enable_periph_clk+0x50>)
   80586:	699a      	ldr	r2, [r3, #24]
   80588:	2301      	movs	r3, #1
   8058a:	4083      	lsls	r3, r0
   8058c:	4393      	bics	r3, r2
   8058e:	d018      	beq.n	805c2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80590:	2301      	movs	r3, #1
   80592:	fa03 f000 	lsl.w	r0, r3, r0
   80596:	4b0d      	ldr	r3, [pc, #52]	; (805cc <pmc_enable_periph_clk+0x50>)
   80598:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8059a:	2000      	movs	r0, #0
   8059c:	4770      	bx	lr
		ul_id -= 32;
   8059e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   805a0:	4b0a      	ldr	r3, [pc, #40]	; (805cc <pmc_enable_periph_clk+0x50>)
   805a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   805a6:	2301      	movs	r3, #1
   805a8:	4083      	lsls	r3, r0
   805aa:	4393      	bics	r3, r2
   805ac:	d00b      	beq.n	805c6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   805ae:	2301      	movs	r3, #1
   805b0:	fa03 f000 	lsl.w	r0, r3, r0
   805b4:	4b05      	ldr	r3, [pc, #20]	; (805cc <pmc_enable_periph_clk+0x50>)
   805b6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   805ba:	2000      	movs	r0, #0
   805bc:	4770      	bx	lr
		return 1;
   805be:	2001      	movs	r0, #1
   805c0:	4770      	bx	lr
	return 0;
   805c2:	2000      	movs	r0, #0
   805c4:	4770      	bx	lr
   805c6:	2000      	movs	r0, #0
}
   805c8:	4770      	bx	lr
   805ca:	bf00      	nop
   805cc:	400e0600 	.word	0x400e0600

000805d0 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
   805d0:	b510      	push	{r4, lr}
	WDT->WDT_MR = WDT_MR_WDDIS;
   805d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   805d6:	4b0c      	ldr	r3, [pc, #48]	; (80608 <board_init+0x38>)
   805d8:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   805da:	200b      	movs	r0, #11
   805dc:	4c0b      	ldr	r4, [pc, #44]	; (8060c <board_init+0x3c>)
   805de:	47a0      	blx	r4
   805e0:	200c      	movs	r0, #12
   805e2:	47a0      	blx	r4
   805e4:	200d      	movs	r0, #13
   805e6:	47a0      	blx	r4
   805e8:	200e      	movs	r0, #14
   805ea:	47a0      	blx	r4
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   805ec:	4b08      	ldr	r3, [pc, #32]	; (80610 <board_init+0x40>)
   805ee:	f44f 7240 	mov.w	r2, #768	; 0x300
   805f2:	661a      	str	r2, [r3, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   805f4:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   805f6:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   805f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   805fc:	6f19      	ldr	r1, [r3, #112]	; 0x70
   805fe:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   80602:	6719      	str	r1, [r3, #112]	; 0x70
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   80604:	605a      	str	r2, [r3, #4]
   80606:	bd10      	pop	{r4, pc}
   80608:	400e1a50 	.word	0x400e1a50
   8060c:	0008057d 	.word	0x0008057d
   80610:	400e0e00 	.word	0x400e0e00

00080614 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80614:	e7fe      	b.n	80614 <Dummy_Handler>
	...

00080618 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80618:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8061a:	4b1c      	ldr	r3, [pc, #112]	; (8068c <Reset_Handler+0x74>)
   8061c:	4a1c      	ldr	r2, [pc, #112]	; (80690 <Reset_Handler+0x78>)
   8061e:	429a      	cmp	r2, r3
   80620:	d010      	beq.n	80644 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80622:	4b1c      	ldr	r3, [pc, #112]	; (80694 <Reset_Handler+0x7c>)
   80624:	4a19      	ldr	r2, [pc, #100]	; (8068c <Reset_Handler+0x74>)
   80626:	429a      	cmp	r2, r3
   80628:	d20c      	bcs.n	80644 <Reset_Handler+0x2c>
   8062a:	3b01      	subs	r3, #1
   8062c:	1a9b      	subs	r3, r3, r2
   8062e:	f023 0303 	bic.w	r3, r3, #3
   80632:	3304      	adds	r3, #4
   80634:	4413      	add	r3, r2
   80636:	4916      	ldr	r1, [pc, #88]	; (80690 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80638:	f851 0b04 	ldr.w	r0, [r1], #4
   8063c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80640:	429a      	cmp	r2, r3
   80642:	d1f9      	bne.n	80638 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80644:	4b14      	ldr	r3, [pc, #80]	; (80698 <Reset_Handler+0x80>)
   80646:	4a15      	ldr	r2, [pc, #84]	; (8069c <Reset_Handler+0x84>)
   80648:	429a      	cmp	r2, r3
   8064a:	d20a      	bcs.n	80662 <Reset_Handler+0x4a>
   8064c:	3b01      	subs	r3, #1
   8064e:	1a9b      	subs	r3, r3, r2
   80650:	f023 0303 	bic.w	r3, r3, #3
   80654:	3304      	adds	r3, #4
   80656:	4413      	add	r3, r2
		*pDest++ = 0;
   80658:	2100      	movs	r1, #0
   8065a:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8065e:	4293      	cmp	r3, r2
   80660:	d1fb      	bne.n	8065a <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80662:	4b0f      	ldr	r3, [pc, #60]	; (806a0 <Reset_Handler+0x88>)
   80664:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80668:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8066c:	490d      	ldr	r1, [pc, #52]	; (806a4 <Reset_Handler+0x8c>)
   8066e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80670:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80678:	d203      	bcs.n	80682 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8067a:	688b      	ldr	r3, [r1, #8]
   8067c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80680:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80682:	4b09      	ldr	r3, [pc, #36]	; (806a8 <Reset_Handler+0x90>)
   80684:	4798      	blx	r3

	/* Branch to main function */
	main();
   80686:	4b09      	ldr	r3, [pc, #36]	; (806ac <Reset_Handler+0x94>)
   80688:	4798      	blx	r3
   8068a:	e7fe      	b.n	8068a <Reset_Handler+0x72>
   8068c:	20070000 	.word	0x20070000
   80690:	000810a0 	.word	0x000810a0
   80694:	20070570 	.word	0x20070570
   80698:	20070624 	.word	0x20070624
   8069c:	20070570 	.word	0x20070570
   806a0:	00080000 	.word	0x00080000
   806a4:	e000ed00 	.word	0xe000ed00
   806a8:	00080f29 	.word	0x00080f29
   806ac:	00080e75 	.word	0x00080e75

000806b0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   806b0:	4b3d      	ldr	r3, [pc, #244]	; (807a8 <SystemCoreClockUpdate+0xf8>)
   806b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   806b4:	f003 0303 	and.w	r3, r3, #3
   806b8:	2b03      	cmp	r3, #3
   806ba:	d80e      	bhi.n	806da <SystemCoreClockUpdate+0x2a>
   806bc:	e8df f003 	tbb	[pc, r3]
   806c0:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   806c4:	4b39      	ldr	r3, [pc, #228]	; (807ac <SystemCoreClockUpdate+0xfc>)
   806c6:	695b      	ldr	r3, [r3, #20]
   806c8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   806cc:	bf14      	ite	ne
   806ce:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   806d2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   806d6:	4b36      	ldr	r3, [pc, #216]	; (807b0 <SystemCoreClockUpdate+0x100>)
   806d8:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   806da:	4b33      	ldr	r3, [pc, #204]	; (807a8 <SystemCoreClockUpdate+0xf8>)
   806dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   806de:	f003 0370 	and.w	r3, r3, #112	; 0x70
   806e2:	2b70      	cmp	r3, #112	; 0x70
   806e4:	d057      	beq.n	80796 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   806e6:	4b30      	ldr	r3, [pc, #192]	; (807a8 <SystemCoreClockUpdate+0xf8>)
   806e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   806ea:	4931      	ldr	r1, [pc, #196]	; (807b0 <SystemCoreClockUpdate+0x100>)
   806ec:	f3c2 1202 	ubfx	r2, r2, #4, #3
   806f0:	680b      	ldr	r3, [r1, #0]
   806f2:	40d3      	lsrs	r3, r2
   806f4:	600b      	str	r3, [r1, #0]
   806f6:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   806f8:	4b2b      	ldr	r3, [pc, #172]	; (807a8 <SystemCoreClockUpdate+0xf8>)
   806fa:	6a1b      	ldr	r3, [r3, #32]
   806fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80700:	d003      	beq.n	8070a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80702:	4a2c      	ldr	r2, [pc, #176]	; (807b4 <SystemCoreClockUpdate+0x104>)
   80704:	4b2a      	ldr	r3, [pc, #168]	; (807b0 <SystemCoreClockUpdate+0x100>)
   80706:	601a      	str	r2, [r3, #0]
   80708:	e7e7      	b.n	806da <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8070a:	4a2b      	ldr	r2, [pc, #172]	; (807b8 <SystemCoreClockUpdate+0x108>)
   8070c:	4b28      	ldr	r3, [pc, #160]	; (807b0 <SystemCoreClockUpdate+0x100>)
   8070e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80710:	4b25      	ldr	r3, [pc, #148]	; (807a8 <SystemCoreClockUpdate+0xf8>)
   80712:	6a1b      	ldr	r3, [r3, #32]
   80714:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80718:	2b10      	cmp	r3, #16
   8071a:	d005      	beq.n	80728 <SystemCoreClockUpdate+0x78>
   8071c:	2b20      	cmp	r3, #32
   8071e:	d1dc      	bne.n	806da <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80720:	4a24      	ldr	r2, [pc, #144]	; (807b4 <SystemCoreClockUpdate+0x104>)
   80722:	4b23      	ldr	r3, [pc, #140]	; (807b0 <SystemCoreClockUpdate+0x100>)
   80724:	601a      	str	r2, [r3, #0]
				break;
   80726:	e7d8      	b.n	806da <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80728:	4a24      	ldr	r2, [pc, #144]	; (807bc <SystemCoreClockUpdate+0x10c>)
   8072a:	4b21      	ldr	r3, [pc, #132]	; (807b0 <SystemCoreClockUpdate+0x100>)
   8072c:	601a      	str	r2, [r3, #0]
				break;
   8072e:	e7d4      	b.n	806da <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80730:	4b1d      	ldr	r3, [pc, #116]	; (807a8 <SystemCoreClockUpdate+0xf8>)
   80732:	6a1b      	ldr	r3, [r3, #32]
   80734:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80738:	d00c      	beq.n	80754 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8073a:	4a1e      	ldr	r2, [pc, #120]	; (807b4 <SystemCoreClockUpdate+0x104>)
   8073c:	4b1c      	ldr	r3, [pc, #112]	; (807b0 <SystemCoreClockUpdate+0x100>)
   8073e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80740:	4b19      	ldr	r3, [pc, #100]	; (807a8 <SystemCoreClockUpdate+0xf8>)
   80742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80744:	f003 0303 	and.w	r3, r3, #3
   80748:	2b02      	cmp	r3, #2
   8074a:	d016      	beq.n	8077a <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8074c:	4a1c      	ldr	r2, [pc, #112]	; (807c0 <SystemCoreClockUpdate+0x110>)
   8074e:	4b18      	ldr	r3, [pc, #96]	; (807b0 <SystemCoreClockUpdate+0x100>)
   80750:	601a      	str	r2, [r3, #0]
   80752:	e7c2      	b.n	806da <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80754:	4a18      	ldr	r2, [pc, #96]	; (807b8 <SystemCoreClockUpdate+0x108>)
   80756:	4b16      	ldr	r3, [pc, #88]	; (807b0 <SystemCoreClockUpdate+0x100>)
   80758:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8075a:	4b13      	ldr	r3, [pc, #76]	; (807a8 <SystemCoreClockUpdate+0xf8>)
   8075c:	6a1b      	ldr	r3, [r3, #32]
   8075e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80762:	2b10      	cmp	r3, #16
   80764:	d005      	beq.n	80772 <SystemCoreClockUpdate+0xc2>
   80766:	2b20      	cmp	r3, #32
   80768:	d1ea      	bne.n	80740 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   8076a:	4a12      	ldr	r2, [pc, #72]	; (807b4 <SystemCoreClockUpdate+0x104>)
   8076c:	4b10      	ldr	r3, [pc, #64]	; (807b0 <SystemCoreClockUpdate+0x100>)
   8076e:	601a      	str	r2, [r3, #0]
				break;
   80770:	e7e6      	b.n	80740 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80772:	4a12      	ldr	r2, [pc, #72]	; (807bc <SystemCoreClockUpdate+0x10c>)
   80774:	4b0e      	ldr	r3, [pc, #56]	; (807b0 <SystemCoreClockUpdate+0x100>)
   80776:	601a      	str	r2, [r3, #0]
				break;
   80778:	e7e2      	b.n	80740 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8077a:	4a0b      	ldr	r2, [pc, #44]	; (807a8 <SystemCoreClockUpdate+0xf8>)
   8077c:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8077e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80780:	480b      	ldr	r0, [pc, #44]	; (807b0 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80782:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80786:	6803      	ldr	r3, [r0, #0]
   80788:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8078c:	b2d2      	uxtb	r2, r2
   8078e:	fbb3 f3f2 	udiv	r3, r3, r2
   80792:	6003      	str	r3, [r0, #0]
   80794:	e7a1      	b.n	806da <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80796:	4a06      	ldr	r2, [pc, #24]	; (807b0 <SystemCoreClockUpdate+0x100>)
   80798:	6813      	ldr	r3, [r2, #0]
   8079a:	490a      	ldr	r1, [pc, #40]	; (807c4 <SystemCoreClockUpdate+0x114>)
   8079c:	fba1 1303 	umull	r1, r3, r1, r3
   807a0:	085b      	lsrs	r3, r3, #1
   807a2:	6013      	str	r3, [r2, #0]
   807a4:	4770      	bx	lr
   807a6:	bf00      	nop
   807a8:	400e0600 	.word	0x400e0600
   807ac:	400e1a10 	.word	0x400e1a10
   807b0:	20070138 	.word	0x20070138
   807b4:	00b71b00 	.word	0x00b71b00
   807b8:	003d0900 	.word	0x003d0900
   807bc:	007a1200 	.word	0x007a1200
   807c0:	0e4e1c00 	.word	0x0e4e1c00
   807c4:	aaaaaaab 	.word	0xaaaaaaab

000807c8 <Stop_Button>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   807c8:	4b03      	ldr	r3, [pc, #12]	; (807d8 <Stop_Button+0x10>)
   807ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   807ce:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   807d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   807d4:	631a      	str	r2, [r3, #48]	; 0x30
   807d6:	4770      	bx	lr
   807d8:	400e1200 	.word	0x400e1200

000807dc <JoystickButton>:
	Z_AxisREF=Z_Axis;
}


void JoystickButton()
{
   807dc:	b508      	push	{r3, lr}
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   807de:	4b07      	ldr	r3, [pc, #28]	; (807fc <JoystickButton+0x20>)
   807e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   807e2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
		port->PIO_CODR = mask;
   807e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   807ea:	4b04      	ldr	r3, [pc, #16]	; (807fc <JoystickButton+0x20>)
   807ec:	bf14      	ite	ne
   807ee:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   807f0:	631a      	streq	r2, [r3, #48]	; 0x30
		//Since the interrupt could be any pin on PORTC we need to
		//  check if PC12 is the one triggering the interrupt.
			ioport_toggle_pin_level(LED);
			delay_ms(1000);
   807f2:	4803      	ldr	r0, [pc, #12]	; (80800 <JoystickButton+0x24>)
   807f4:	4b03      	ldr	r3, [pc, #12]	; (80804 <JoystickButton+0x28>)
   807f6:	4798      	blx	r3
   807f8:	bd08      	pop	{r3, pc}
   807fa:	bf00      	nop
   807fc:	400e1000 	.word	0x400e1000
   80800:	005b8d80 	.word	0x005b8d80
   80804:	20070001 	.word	0x20070001

00080808 <Manual>:
}
void Manual()
{	
   80808:	b510      	push	{r4, lr}
   8080a:	b082      	sub	sp, #8
		delay_ms(50);
   8080c:	4813      	ldr	r0, [pc, #76]	; (8085c <Manual+0x54>)
   8080e:	4b14      	ldr	r3, [pc, #80]	; (80860 <Manual+0x58>)
   80810:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80812:	4b14      	ldr	r3, [pc, #80]	; (80864 <Manual+0x5c>)
   80814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		pin_val=ioport_get_pin_level(MANUALPIN);
   80816:	f3c3 33c0 	ubfx	r3, r3, #15, #1
   8081a:	4a13      	ldr	r2, [pc, #76]	; (80868 <Manual+0x60>)
   8081c:	7013      	strb	r3, [r2, #0]

	if (pin_val==true)
   8081e:	7813      	ldrb	r3, [r2, #0]
   80820:	b2db      	uxtb	r3, r3
   80822:	2b01      	cmp	r3, #1
   80824:	d00d      	beq.n	80842 <Manual+0x3a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80826:	480f      	ldr	r0, [pc, #60]	; (80864 <Manual+0x5c>)
   80828:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   8082c:	6343      	str	r3, [r0, #52]	; 0x34
		pio_handler_set(PIOC,ID_PIOC,PIO_PC15,PIO_IT_FALL_EDGE,Manual);
	}
	else
	{
		ioport_set_pin_level(LManual, IOPORT_PIN_LEVEL_LOW);
		pio_handler_set(PIOC,ID_PIOC,PIO_PC15,PIO_IT_EDGE,Manual);
   8082e:	4b0f      	ldr	r3, [pc, #60]	; (8086c <Manual+0x64>)
   80830:	9300      	str	r3, [sp, #0]
   80832:	2340      	movs	r3, #64	; 0x40
   80834:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80838:	210d      	movs	r1, #13
   8083a:	4c0d      	ldr	r4, [pc, #52]	; (80870 <Manual+0x68>)
   8083c:	47a0      	blx	r4
	}
	
}
   8083e:	b002      	add	sp, #8
   80840:	bd10      	pop	{r4, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80842:	4808      	ldr	r0, [pc, #32]	; (80864 <Manual+0x5c>)
   80844:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   80848:	6303      	str	r3, [r0, #48]	; 0x30
		pio_handler_set(PIOC,ID_PIOC,PIO_PC15,PIO_IT_FALL_EDGE,Manual);
   8084a:	4b08      	ldr	r3, [pc, #32]	; (8086c <Manual+0x64>)
   8084c:	9300      	str	r3, [sp, #0]
   8084e:	2350      	movs	r3, #80	; 0x50
   80850:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80854:	210d      	movs	r1, #13
   80856:	4c06      	ldr	r4, [pc, #24]	; (80870 <Manual+0x68>)
   80858:	47a0      	blx	r4
   8085a:	e7f0      	b.n	8083e <Manual+0x36>
   8085c:	000493e0 	.word	0x000493e0
   80860:	20070001 	.word	0x20070001
   80864:	400e1200 	.word	0x400e1200
   80868:	2007060c 	.word	0x2007060c
   8086c:	00080809 	.word	0x00080809
   80870:	000802dd 	.word	0x000802dd

00080874 <Automatic>:
void Automatic()
{
   80874:	b510      	push	{r4, lr}
   80876:	b082      	sub	sp, #8
	delay_ms(50);
   80878:	4813      	ldr	r0, [pc, #76]	; (808c8 <Automatic+0x54>)
   8087a:	4b14      	ldr	r3, [pc, #80]	; (808cc <Automatic+0x58>)
   8087c:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8087e:	4b14      	ldr	r3, [pc, #80]	; (808d0 <Automatic+0x5c>)
   80880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	pin_val=ioport_get_pin_level(AUTOPIN);
   80882:	f3c3 3380 	ubfx	r3, r3, #14, #1
   80886:	4a13      	ldr	r2, [pc, #76]	; (808d4 <Automatic+0x60>)
   80888:	7013      	strb	r3, [r2, #0]
	if (pin_val==true)
   8088a:	7813      	ldrb	r3, [r2, #0]
   8088c:	b2db      	uxtb	r3, r3
   8088e:	2b01      	cmp	r3, #1
   80890:	d00d      	beq.n	808ae <Automatic+0x3a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80892:	480f      	ldr	r0, [pc, #60]	; (808d0 <Automatic+0x5c>)
   80894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80898:	6343      	str	r3, [r0, #52]	; 0x34
	}
	else
	{
		ioport_set_pin_level(LAuto, IOPORT_PIN_LEVEL_LOW);
		
		pio_handler_set(PIOC,ID_PIOC,PIO_PC14,PIO_IT_FALL_EDGE,Automatic);
   8089a:	4b0f      	ldr	r3, [pc, #60]	; (808d8 <Automatic+0x64>)
   8089c:	9300      	str	r3, [sp, #0]
   8089e:	2350      	movs	r3, #80	; 0x50
   808a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   808a4:	210d      	movs	r1, #13
   808a6:	4c0d      	ldr	r4, [pc, #52]	; (808dc <Automatic+0x68>)
   808a8:	47a0      	blx	r4
	}
	
}
   808aa:	b002      	add	sp, #8
   808ac:	bd10      	pop	{r4, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   808ae:	4808      	ldr	r0, [pc, #32]	; (808d0 <Automatic+0x5c>)
   808b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   808b4:	6303      	str	r3, [r0, #48]	; 0x30
		pio_handler_set(PIOC,ID_PIOC,PIO_PC14,PIO_IT_EDGE,Automatic);
   808b6:	4b08      	ldr	r3, [pc, #32]	; (808d8 <Automatic+0x64>)
   808b8:	9300      	str	r3, [sp, #0]
   808ba:	2340      	movs	r3, #64	; 0x40
   808bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   808c0:	210d      	movs	r1, #13
   808c2:	4c06      	ldr	r4, [pc, #24]	; (808dc <Automatic+0x68>)
   808c4:	47a0      	blx	r4
   808c6:	e7f0      	b.n	808aa <Automatic+0x36>
   808c8:	000493e0 	.word	0x000493e0
   808cc:	20070001 	.word	0x20070001
   808d0:	400e1200 	.word	0x400e1200
   808d4:	2007060c 	.word	0x2007060c
   808d8:	00080875 	.word	0x00080875
   808dc:	000802dd 	.word	0x000802dd

000808e0 <Encouderau>:
		else
		Manual();
	}
}
void Encouderau ()
{	
   808e0:	b508      	push	{r3, lr}
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   808e2:	4b13      	ldr	r3, [pc, #76]	; (80930 <Encouderau+0x50>)
   808e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if (ioport_get_pin_level(valuedecrementa)==true)
   808e6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   808ea:	d112      	bne.n	80912 <Encouderau+0x32>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   808ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808f0:	4b10      	ldr	r3, [pc, #64]	; (80934 <Encouderau+0x54>)
   808f2:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   808f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   808f8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   808fc:	635a      	str	r2, [r3, #52]	; 0x34
			break;
		}

	}
	*/
	jogger=jogger+1;
   808fe:	4a0e      	ldr	r2, [pc, #56]	; (80938 <Encouderau+0x58>)
   80900:	6813      	ldr	r3, [r2, #0]
   80902:	3301      	adds	r3, #1
   80904:	6013      	str	r3, [r2, #0]
	
	delay_s(1);	
	pio_enable_interrupt(PIOC, PIO_PC18);
	
	*/
	pio_enable_interrupt(PIOC, PIO_PC18);
   80906:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   8090a:	4809      	ldr	r0, [pc, #36]	; (80930 <Encouderau+0x50>)
   8090c:	4b0b      	ldr	r3, [pc, #44]	; (8093c <Encouderau+0x5c>)
   8090e:	4798      	blx	r3
   80910:	bd08      	pop	{r3, pc}
		jogger=jogger-1;
   80912:	4a09      	ldr	r2, [pc, #36]	; (80938 <Encouderau+0x58>)
   80914:	6813      	ldr	r3, [r2, #0]
   80916:	3b01      	subs	r3, #1
   80918:	6013      	str	r3, [r2, #0]
   8091a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8091e:	4b05      	ldr	r3, [pc, #20]	; (80934 <Encouderau+0x54>)
   80920:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80926:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   8092a:	631a      	str	r2, [r3, #48]	; 0x30
   8092c:	e7eb      	b.n	80906 <Encouderau+0x26>
   8092e:	bf00      	nop
   80930:	400e1200 	.word	0x400e1200
   80934:	400e1000 	.word	0x400e1000
   80938:	20070608 	.word	0x20070608
   8093c:	00080487 	.word	0x00080487

00080940 <adc_setup>:
{
   80940:	b538      	push	{r3, r4, r5, lr}
   80942:	2025      	movs	r0, #37	; 0x25
   80944:	4b1c      	ldr	r3, [pc, #112]	; (809b8 <adc_setup+0x78>)
   80946:	4798      	blx	r3
	adc_init (ADC, sysclk_get_cpu_hz(), 3200000, ADC_STARTUP_TIME_4);
   80948:	4c1c      	ldr	r4, [pc, #112]	; (809bc <adc_setup+0x7c>)
   8094a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   8094e:	4a1c      	ldr	r2, [pc, #112]	; (809c0 <adc_setup+0x80>)
   80950:	491c      	ldr	r1, [pc, #112]	; (809c4 <adc_setup+0x84>)
   80952:	4620      	mov	r0, r4
   80954:	4d1c      	ldr	r5, [pc, #112]	; (809c8 <adc_setup+0x88>)
   80956:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1); // Set timings - standard values
   80958:	2301      	movs	r3, #1
   8095a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   8095e:	2100      	movs	r1, #0
   80960:	4620      	mov	r0, r4
   80962:	4d1a      	ldr	r5, [pc, #104]	; (809cc <adc_setup+0x8c>)
   80964:	47a8      	blx	r5
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   80966:	2200      	movs	r2, #0
   80968:	4611      	mov	r1, r2
   8096a:	4620      	mov	r0, r4
   8096c:	4b18      	ldr	r3, [pc, #96]	; (809d0 <adc_setup+0x90>)
   8096e:	4798      	blx	r3
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   80970:	2100      	movs	r1, #0
   80972:	4620      	mov	r0, r4
   80974:	4b17      	ldr	r3, [pc, #92]	; (809d4 <adc_setup+0x94>)
   80976:	4798      	blx	r3
	adc_enable_tag(ADC);
   80978:	4620      	mov	r0, r4
   8097a:	4b17      	ldr	r3, [pc, #92]	; (809d8 <adc_setup+0x98>)
   8097c:	4798      	blx	r3
	adc_configure_sequence(ADC, ch_list, 4);
   8097e:	2204      	movs	r2, #4
   80980:	4916      	ldr	r1, [pc, #88]	; (809dc <adc_setup+0x9c>)
   80982:	4620      	mov	r0, r4
   80984:	4b16      	ldr	r3, [pc, #88]	; (809e0 <adc_setup+0xa0>)
   80986:	4798      	blx	r3
	adc_start_sequencer(ADC);
   80988:	4620      	mov	r0, r4
   8098a:	4b16      	ldr	r3, [pc, #88]	; (809e4 <adc_setup+0xa4>)
   8098c:	4798      	blx	r3
	adc_enable_channel(ADC, (enum adc_channel_num_t)0);
   8098e:	2100      	movs	r1, #0
   80990:	4620      	mov	r0, r4
   80992:	4b15      	ldr	r3, [pc, #84]	; (809e8 <adc_setup+0xa8>)
   80994:	4798      	blx	r3
	adc_set_bias_current(ADC, 1);
   80996:	2101      	movs	r1, #1
   80998:	4620      	mov	r0, r4
   8099a:	4b14      	ldr	r3, [pc, #80]	; (809ec <adc_setup+0xac>)
   8099c:	4798      	blx	r3
	adc_disable_ts(ADC); // disable temperature sensor
   8099e:	4620      	mov	r0, r4
   809a0:	4b13      	ldr	r3, [pc, #76]	; (809f0 <adc_setup+0xb0>)
   809a2:	4798      	blx	r3
	adc_enable_interrupt(ADC, ADC_IER_DRDY);
   809a4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   809a8:	4620      	mov	r0, r4
   809aa:	4b12      	ldr	r3, [pc, #72]	; (809f4 <adc_setup+0xb4>)
   809ac:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   809ae:	2220      	movs	r2, #32
   809b0:	4b11      	ldr	r3, [pc, #68]	; (809f8 <adc_setup+0xb8>)
   809b2:	605a      	str	r2, [r3, #4]
   809b4:	bd38      	pop	{r3, r4, r5, pc}
   809b6:	bf00      	nop
   809b8:	0008057d 	.word	0x0008057d
   809bc:	400c0000 	.word	0x400c0000
   809c0:	0030d400 	.word	0x0030d400
   809c4:	0501bd00 	.word	0x0501bd00
   809c8:	00080161 	.word	0x00080161
   809cc:	00080215 	.word	0x00080215
   809d0:	000801a5 	.word	0x000801a5
   809d4:	00080195 	.word	0x00080195
   809d8:	0008024f 	.word	0x0008024f
   809dc:	2007013c 	.word	0x2007013c
   809e0:	000801b3 	.word	0x000801b3
   809e4:	00080259 	.word	0x00080259
   809e8:	00080237 	.word	0x00080237
   809ec:	0008026b 	.word	0x0008026b
   809f0:	0008027d 	.word	0x0008027d
   809f4:	00080263 	.word	0x00080263
   809f8:	e000e100 	.word	0xe000e100

000809fc <statusjoystick>:
	if (X_Axis<(X_AxisREF-10))
   809fc:	4b28      	ldr	r3, [pc, #160]	; (80aa0 <statusjoystick+0xa4>)
   809fe:	781a      	ldrb	r2, [r3, #0]
   80a00:	4b28      	ldr	r3, [pc, #160]	; (80aa4 <statusjoystick+0xa8>)
   80a02:	781b      	ldrb	r3, [r3, #0]
   80a04:	f1a3 010a 	sub.w	r1, r3, #10
   80a08:	428a      	cmp	r2, r1
   80a0a:	da23      	bge.n	80a54 <statusjoystick+0x58>
   80a0c:	4b26      	ldr	r3, [pc, #152]	; (80aa8 <statusjoystick+0xac>)
   80a0e:	2202      	movs	r2, #2
   80a10:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a12:	2201      	movs	r2, #1
   80a14:	635a      	str	r2, [r3, #52]	; 0x34
	if (Y_Axis<(Y_AxisREF-10))
   80a16:	4b25      	ldr	r3, [pc, #148]	; (80aac <statusjoystick+0xb0>)
   80a18:	781a      	ldrb	r2, [r3, #0]
   80a1a:	4b25      	ldr	r3, [pc, #148]	; (80ab0 <statusjoystick+0xb4>)
   80a1c:	781b      	ldrb	r3, [r3, #0]
   80a1e:	f1a3 010a 	sub.w	r1, r3, #10
   80a22:	428a      	cmp	r2, r1
   80a24:	da22      	bge.n	80a6c <statusjoystick+0x70>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a26:	4b20      	ldr	r3, [pc, #128]	; (80aa8 <statusjoystick+0xac>)
   80a28:	2208      	movs	r2, #8
   80a2a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a2c:	2204      	movs	r2, #4
   80a2e:	635a      	str	r2, [r3, #52]	; 0x34
	if (Z_Axis<(Z_AxisREF-10))
   80a30:	4b20      	ldr	r3, [pc, #128]	; (80ab4 <statusjoystick+0xb8>)
   80a32:	781a      	ldrb	r2, [r3, #0]
   80a34:	4b20      	ldr	r3, [pc, #128]	; (80ab8 <statusjoystick+0xbc>)
   80a36:	781b      	ldrb	r3, [r3, #0]
   80a38:	f1a3 010a 	sub.w	r1, r3, #10
   80a3c:	428a      	cmp	r2, r1
   80a3e:	db20      	blt.n	80a82 <statusjoystick+0x86>
		if (Z_Axis>Z_AxisREF+10)
   80a40:	330a      	adds	r3, #10
   80a42:	429a      	cmp	r2, r3
   80a44:	dc24      	bgt.n	80a90 <statusjoystick+0x94>
   80a46:	4b18      	ldr	r3, [pc, #96]	; (80aa8 <statusjoystick+0xac>)
   80a48:	2240      	movs	r2, #64	; 0x40
   80a4a:	635a      	str	r2, [r3, #52]	; 0x34
   80a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
   80a50:	635a      	str	r2, [r3, #52]	; 0x34
   80a52:	4770      	bx	lr
		if (X_Axis>X_AxisREF+10)
   80a54:	330a      	adds	r3, #10
   80a56:	429a      	cmp	r2, r3
   80a58:	4b13      	ldr	r3, [pc, #76]	; (80aa8 <statusjoystick+0xac>)
   80a5a:	f04f 0202 	mov.w	r2, #2
   80a5e:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a60:	f04f 0201 	mov.w	r2, #1
   80a64:	bfcc      	ite	gt
   80a66:	631a      	strgt	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a68:	635a      	strle	r2, [r3, #52]	; 0x34
   80a6a:	e7d4      	b.n	80a16 <statusjoystick+0x1a>
		if (Y_Axis>Y_AxisREF+10)
   80a6c:	330a      	adds	r3, #10
   80a6e:	429a      	cmp	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a70:	4b0d      	ldr	r3, [pc, #52]	; (80aa8 <statusjoystick+0xac>)
   80a72:	f04f 0204 	mov.w	r2, #4
   80a76:	bfcc      	ite	gt
   80a78:	631a      	strgt	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a7a:	635a      	strle	r2, [r3, #52]	; 0x34
   80a7c:	2208      	movs	r2, #8
   80a7e:	635a      	str	r2, [r3, #52]	; 0x34
   80a80:	e7d6      	b.n	80a30 <statusjoystick+0x34>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a82:	4b09      	ldr	r3, [pc, #36]	; (80aa8 <statusjoystick+0xac>)
   80a84:	2240      	movs	r2, #64	; 0x40
   80a86:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a88:	f44f 7200 	mov.w	r2, #512	; 0x200
   80a8c:	635a      	str	r2, [r3, #52]	; 0x34
   80a8e:	4770      	bx	lr
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a90:	4b05      	ldr	r3, [pc, #20]	; (80aa8 <statusjoystick+0xac>)
   80a92:	f44f 7200 	mov.w	r2, #512	; 0x200
   80a96:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a98:	2240      	movs	r2, #64	; 0x40
   80a9a:	635a      	str	r2, [r3, #52]	; 0x34
   80a9c:	4770      	bx	lr
   80a9e:	bf00      	nop
   80aa0:	20070600 	.word	0x20070600
   80aa4:	20070601 	.word	0x20070601
   80aa8:	400e1400 	.word	0x400e1400
   80aac:	20070602 	.word	0x20070602
   80ab0:	20070603 	.word	0x20070603
   80ab4:	20070604 	.word	0x20070604
   80ab8:	20070605 	.word	0x20070605

00080abc <ADC_Handler>:
{
   80abc:	b510      	push	{r4, lr}
	i=i+1;
   80abe:	4a37      	ldr	r2, [pc, #220]	; (80b9c <ADC_Handler+0xe0>)
   80ac0:	7813      	ldrb	r3, [r2, #0]
   80ac2:	3301      	adds	r3, #1
   80ac4:	b2db      	uxtb	r3, r3
   80ac6:	7013      	strb	r3, [r2, #0]
	switch (i)
   80ac8:	2b02      	cmp	r3, #2
   80aca:	d02b      	beq.n	80b24 <ADC_Handler+0x68>
   80acc:	2b03      	cmp	r3, #3
   80ace:	d046      	beq.n	80b5e <ADC_Handler+0xa2>
   80ad0:	2b01      	cmp	r3, #1
   80ad2:	d000      	beq.n	80ad6 <ADC_Handler+0x1a>
   80ad4:	bd10      	pop	{r4, pc}
		if ((adc_get_status(ADC) & ADC_ISR_DRDY) ==		ADC_ISR_DRDY)
   80ad6:	4832      	ldr	r0, [pc, #200]	; (80ba0 <ADC_Handler+0xe4>)
   80ad8:	4b32      	ldr	r3, [pc, #200]	; (80ba4 <ADC_Handler+0xe8>)
   80ada:	4798      	blx	r3
   80adc:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80ae0:	d110      	bne.n	80b04 <ADC_Handler+0x48>
		adc_disable_channel(ADC, (enum adc_channel_num_t)0);
   80ae2:	4c2f      	ldr	r4, [pc, #188]	; (80ba0 <ADC_Handler+0xe4>)
   80ae4:	2100      	movs	r1, #0
   80ae6:	4620      	mov	r0, r4
   80ae8:	4b2f      	ldr	r3, [pc, #188]	; (80ba8 <ADC_Handler+0xec>)
   80aea:	4798      	blx	r3
		adc_enable_channel(ADC, (enum adc_channel_num_t)1);
   80aec:	2101      	movs	r1, #1
   80aee:	4620      	mov	r0, r4
   80af0:	4b2e      	ldr	r3, [pc, #184]	; (80bac <ADC_Handler+0xf0>)
   80af2:	4798      	blx	r3
		temx_Axis=X_Axis;
   80af4:	4b2e      	ldr	r3, [pc, #184]	; (80bb0 <ADC_Handler+0xf4>)
   80af6:	781a      	ldrb	r2, [r3, #0]
   80af8:	4b2e      	ldr	r3, [pc, #184]	; (80bb4 <ADC_Handler+0xf8>)
   80afa:	701a      	strb	r2, [r3, #0]
		adc_start(ADC);
   80afc:	4620      	mov	r0, r4
   80afe:	4b2e      	ldr	r3, [pc, #184]	; (80bb8 <ADC_Handler+0xfc>)
   80b00:	4798      	blx	r3
		break;
   80b02:	bd10      	pop	{r4, pc}
			X_Axis = adc_get_latest_value(ADC);
   80b04:	4826      	ldr	r0, [pc, #152]	; (80ba0 <ADC_Handler+0xe4>)
   80b06:	4b2d      	ldr	r3, [pc, #180]	; (80bbc <ADC_Handler+0x100>)
   80b08:	4798      	blx	r3
   80b0a:	4b29      	ldr	r3, [pc, #164]	; (80bb0 <ADC_Handler+0xf4>)
   80b0c:	7018      	strb	r0, [r3, #0]
			current_channel = (current_data & ADC_LCDR_CHNB_Msk) >> ADC_LCDR_CHNB_Pos;
   80b0e:	4b2c      	ldr	r3, [pc, #176]	; (80bc0 <ADC_Handler+0x104>)
   80b10:	681b      	ldr	r3, [r3, #0]
   80b12:	f3c3 3103 	ubfx	r1, r3, #12, #4
   80b16:	4a2b      	ldr	r2, [pc, #172]	; (80bc4 <ADC_Handler+0x108>)
   80b18:	6011      	str	r1, [r2, #0]
			current_value = (current_data & ADC_LCDR_LDATA_Msk);
   80b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
   80b1e:	4a2a      	ldr	r2, [pc, #168]	; (80bc8 <ADC_Handler+0x10c>)
   80b20:	6013      	str	r3, [r2, #0]
   80b22:	e7de      	b.n	80ae2 <ADC_Handler+0x26>
		if ((adc_get_status(ADC) & ADC_ISR_DRDY) ==		ADC_ISR_DRDY)
   80b24:	481e      	ldr	r0, [pc, #120]	; (80ba0 <ADC_Handler+0xe4>)
   80b26:	4b1f      	ldr	r3, [pc, #124]	; (80ba4 <ADC_Handler+0xe8>)
   80b28:	4798      	blx	r3
   80b2a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80b2e:	d110      	bne.n	80b52 <ADC_Handler+0x96>
		adc_disable_channel(ADC, (enum adc_channel_num_t)1);
   80b30:	4c1b      	ldr	r4, [pc, #108]	; (80ba0 <ADC_Handler+0xe4>)
   80b32:	2101      	movs	r1, #1
   80b34:	4620      	mov	r0, r4
   80b36:	4b1c      	ldr	r3, [pc, #112]	; (80ba8 <ADC_Handler+0xec>)
   80b38:	4798      	blx	r3
		adc_enable_channel(ADC, (enum adc_channel_num_t)2);
   80b3a:	2102      	movs	r1, #2
   80b3c:	4620      	mov	r0, r4
   80b3e:	4b1b      	ldr	r3, [pc, #108]	; (80bac <ADC_Handler+0xf0>)
   80b40:	4798      	blx	r3
		temy_Axis=Y_Axis;
   80b42:	4b22      	ldr	r3, [pc, #136]	; (80bcc <ADC_Handler+0x110>)
   80b44:	781a      	ldrb	r2, [r3, #0]
   80b46:	4b22      	ldr	r3, [pc, #136]	; (80bd0 <ADC_Handler+0x114>)
   80b48:	701a      	strb	r2, [r3, #0]
		adc_start(ADC);
   80b4a:	4620      	mov	r0, r4
   80b4c:	4b1a      	ldr	r3, [pc, #104]	; (80bb8 <ADC_Handler+0xfc>)
   80b4e:	4798      	blx	r3
		break;
   80b50:	bd10      	pop	{r4, pc}
			Y_Axis = adc_get_latest_value(ADC);
   80b52:	4813      	ldr	r0, [pc, #76]	; (80ba0 <ADC_Handler+0xe4>)
   80b54:	4b19      	ldr	r3, [pc, #100]	; (80bbc <ADC_Handler+0x100>)
   80b56:	4798      	blx	r3
   80b58:	4b1c      	ldr	r3, [pc, #112]	; (80bcc <ADC_Handler+0x110>)
   80b5a:	7018      	strb	r0, [r3, #0]
   80b5c:	e7e8      	b.n	80b30 <ADC_Handler+0x74>
		if ((adc_get_status(ADC) & ADC_ISR_DRDY) ==		ADC_ISR_DRDY)
   80b5e:	4810      	ldr	r0, [pc, #64]	; (80ba0 <ADC_Handler+0xe4>)
   80b60:	4b10      	ldr	r3, [pc, #64]	; (80ba4 <ADC_Handler+0xe8>)
   80b62:	4798      	blx	r3
   80b64:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   80b68:	d111      	bne.n	80b8e <ADC_Handler+0xd2>
		adc_disable_channel(ADC, (enum adc_channel_num_t)2);
   80b6a:	4c0d      	ldr	r4, [pc, #52]	; (80ba0 <ADC_Handler+0xe4>)
   80b6c:	2102      	movs	r1, #2
   80b6e:	4620      	mov	r0, r4
   80b70:	4b0d      	ldr	r3, [pc, #52]	; (80ba8 <ADC_Handler+0xec>)
   80b72:	4798      	blx	r3
		adc_enable_channel(ADC, (enum adc_channel_num_t)0);
   80b74:	2100      	movs	r1, #0
   80b76:	4620      	mov	r0, r4
   80b78:	4b0c      	ldr	r3, [pc, #48]	; (80bac <ADC_Handler+0xf0>)
   80b7a:	4798      	blx	r3
		adc_start(ADC);
   80b7c:	4620      	mov	r0, r4
   80b7e:	4b0e      	ldr	r3, [pc, #56]	; (80bb8 <ADC_Handler+0xfc>)
   80b80:	4798      	blx	r3
		i=0;
   80b82:	2200      	movs	r2, #0
   80b84:	4b05      	ldr	r3, [pc, #20]	; (80b9c <ADC_Handler+0xe0>)
   80b86:	701a      	strb	r2, [r3, #0]
	statusjoystick();
   80b88:	4b12      	ldr	r3, [pc, #72]	; (80bd4 <ADC_Handler+0x118>)
   80b8a:	4798      	blx	r3
}
   80b8c:	e7a2      	b.n	80ad4 <ADC_Handler+0x18>
			Z_Axis = adc_get_latest_value(ADC);
   80b8e:	4804      	ldr	r0, [pc, #16]	; (80ba0 <ADC_Handler+0xe4>)
   80b90:	4b0a      	ldr	r3, [pc, #40]	; (80bbc <ADC_Handler+0x100>)
   80b92:	4798      	blx	r3
   80b94:	4b10      	ldr	r3, [pc, #64]	; (80bd8 <ADC_Handler+0x11c>)
   80b96:	7018      	strb	r0, [r3, #0]
   80b98:	e7e7      	b.n	80b6a <ADC_Handler+0xae>
   80b9a:	bf00      	nop
   80b9c:	20070606 	.word	0x20070606
   80ba0:	400c0000 	.word	0x400c0000
   80ba4:	00080267 	.word	0x00080267
   80ba8:	00080241 	.word	0x00080241
   80bac:	00080237 	.word	0x00080237
   80bb0:	20070600 	.word	0x20070600
   80bb4:	2007060e 	.word	0x2007060e
   80bb8:	00080231 	.word	0x00080231
   80bbc:	0008024b 	.word	0x0008024b
   80bc0:	20070610 	.word	0x20070610
   80bc4:	20070620 	.word	0x20070620
   80bc8:	20070614 	.word	0x20070614
   80bcc:	20070602 	.word	0x20070602
   80bd0:	2007060f 	.word	0x2007060f
   80bd4:	000809fd 	.word	0x000809fd
   80bd8:	20070604 	.word	0x20070604

00080bdc <adccali>:
	X_AxisREF=X_Axis;
   80bdc:	4b06      	ldr	r3, [pc, #24]	; (80bf8 <adccali+0x1c>)
   80bde:	781a      	ldrb	r2, [r3, #0]
   80be0:	4b06      	ldr	r3, [pc, #24]	; (80bfc <adccali+0x20>)
   80be2:	701a      	strb	r2, [r3, #0]
	Y_AxisREF=Y_Axis;
   80be4:	4b06      	ldr	r3, [pc, #24]	; (80c00 <adccali+0x24>)
   80be6:	781a      	ldrb	r2, [r3, #0]
   80be8:	4b06      	ldr	r3, [pc, #24]	; (80c04 <adccali+0x28>)
   80bea:	701a      	strb	r2, [r3, #0]
	Z_AxisREF=Z_Axis;
   80bec:	4b06      	ldr	r3, [pc, #24]	; (80c08 <adccali+0x2c>)
   80bee:	781a      	ldrb	r2, [r3, #0]
   80bf0:	4b06      	ldr	r3, [pc, #24]	; (80c0c <adccali+0x30>)
   80bf2:	701a      	strb	r2, [r3, #0]
   80bf4:	4770      	bx	lr
   80bf6:	bf00      	nop
   80bf8:	20070600 	.word	0x20070600
   80bfc:	20070601 	.word	0x20070601
   80c00:	20070602 	.word	0x20070602
   80c04:	20070603 	.word	0x20070603
   80c08:	20070604 	.word	0x20070604
   80c0c:	20070605 	.word	0x20070605

00080c10 <Start_Button>:
{	
   80c10:	b508      	push	{r3, lr}
   80c12:	4b05      	ldr	r3, [pc, #20]	; (80c28 <Start_Button+0x18>)
   80c14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   80c18:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80c1e:	631a      	str	r2, [r3, #48]	; 0x30
		adccali();
   80c20:	4b02      	ldr	r3, [pc, #8]	; (80c2c <Start_Button+0x1c>)
   80c22:	4798      	blx	r3
   80c24:	bd08      	pop	{r3, pc}
   80c26:	bf00      	nop
   80c28:	400e1200 	.word	0x400e1200
   80c2c:	00080bdd 	.word	0x00080bdd

00080c30 <avr_example>:

}


void avr_example()
{
   80c30:	b570      	push	{r4, r5, r6, lr}
   80c32:	b082      	sub	sp, #8
	pmc_enable_periph_clk(ID_PIOC);
   80c34:	200d      	movs	r0, #13
   80c36:	4b4e      	ldr	r3, [pc, #312]	; (80d70 <avr_example+0x140>)
   80c38:	4798      	blx	r3
	pio_set_output(PIOC, LAuto, LOW, DISABLE, ENABLE);
   80c3a:	4c4e      	ldr	r4, [pc, #312]	; (80d74 <avr_example+0x144>)
   80c3c:	2501      	movs	r5, #1
   80c3e:	9500      	str	r5, [sp, #0]
   80c40:	2300      	movs	r3, #0
   80c42:	461a      	mov	r2, r3
   80c44:	2158      	movs	r1, #88	; 0x58
   80c46:	4620      	mov	r0, r4
   80c48:	4e4b      	ldr	r6, [pc, #300]	; (80d78 <avr_example+0x148>)
   80c4a:	47b0      	blx	r6
	pio_set_output(PIOC, LManual, LOW, DISABLE, ENABLE);
   80c4c:	9500      	str	r5, [sp, #0]
   80c4e:	2300      	movs	r3, #0
   80c50:	461a      	mov	r2, r3
   80c52:	2157      	movs	r1, #87	; 0x57
   80c54:	4620      	mov	r0, r4
   80c56:	47b0      	blx	r6
	pio_set_output(PIOC, LParo, LOW, DISABLE, ENABLE);
   80c58:	9500      	str	r5, [sp, #0]
   80c5a:	2300      	movs	r3, #0
   80c5c:	461a      	mov	r2, r3
   80c5e:	2159      	movs	r1, #89	; 0x59
   80c60:	4620      	mov	r0, r4
   80c62:	47b0      	blx	r6
	pio_set_output(PIOC, LInicio, LOW, DISABLE, ENABLE);
   80c64:	9500      	str	r5, [sp, #0]
   80c66:	2300      	movs	r3, #0
   80c68:	461a      	mov	r2, r3
   80c6a:	2155      	movs	r1, #85	; 0x55
   80c6c:	4620      	mov	r0, r4
   80c6e:	47b0      	blx	r6
	pio_set_output(PIOC, Ldecrementa, LOW, DISABLE, ENABLE);
   80c70:	9500      	str	r5, [sp, #0]
   80c72:	2300      	movs	r3, #0
   80c74:	461a      	mov	r2, r3
   80c76:	210e      	movs	r1, #14
   80c78:	4620      	mov	r0, r4
   80c7a:	47b0      	blx	r6
	pio_set_output(PIOC, Licrementa, LOW, DISABLE, ENABLE);
   80c7c:	9500      	str	r5, [sp, #0]
   80c7e:	2300      	movs	r3, #0
   80c80:	461a      	mov	r2, r3
   80c82:	213a      	movs	r1, #58	; 0x3a
   80c84:	4620      	mov	r0, r4
   80c86:	47b0      	blx	r6
	pio_set_input(PIOC,PIO_PC13,PIO_PULLUP);
   80c88:	462a      	mov	r2, r5
   80c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80c8e:	4620      	mov	r0, r4
   80c90:	4e3a      	ldr	r6, [pc, #232]	; (80d7c <avr_example+0x14c>)
   80c92:	47b0      	blx	r6
	pio_set_input(PIOC,PIO_PC12,PIO_PULLUP);
   80c94:	462a      	mov	r2, r5
   80c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80c9a:	4620      	mov	r0, r4
   80c9c:	47b0      	blx	r6
	pio_set_input(PIOC,PIO_PC14,PIO_PULLUP);
   80c9e:	462a      	mov	r2, r5
   80ca0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80ca4:	4620      	mov	r0, r4
   80ca6:	47b0      	blx	r6
	pio_set_input(PIOC,PIO_PC15,PIO_PULLUP);
   80ca8:	462a      	mov	r2, r5
   80caa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   80cae:	4620      	mov	r0, r4
   80cb0:	47b0      	blx	r6
	pio_set_input(PIOC, PIO_PC16, PIO_PULLUP);
   80cb2:	462a      	mov	r2, r5
   80cb4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   80cb8:	4620      	mov	r0, r4
   80cba:	47b0      	blx	r6
	pio_set_input(PIOC, PIO_PC17, PIO_PULLUP);
   80cbc:	462a      	mov	r2, r5
   80cbe:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   80cc2:	4620      	mov	r0, r4
   80cc4:	47b0      	blx	r6
	pio_set_input(PIOC, PIO_PC18, PIO_PULLUP);
   80cc6:	462a      	mov	r2, r5
   80cc8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   80ccc:	4620      	mov	r0, r4
   80cce:	47b0      	blx	r6
	pio_handler_set(PIOC, ID_PIOC, PIO_PC12, PIO_IT_EDGE, JoystickButton);
   80cd0:	4b2b      	ldr	r3, [pc, #172]	; (80d80 <avr_example+0x150>)
   80cd2:	9300      	str	r3, [sp, #0]
   80cd4:	2340      	movs	r3, #64	; 0x40
   80cd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80cda:	210d      	movs	r1, #13
   80cdc:	4620      	mov	r0, r4
   80cde:	4d29      	ldr	r5, [pc, #164]	; (80d84 <avr_example+0x154>)
   80ce0:	47a8      	blx	r5
	pio_handler_set(PIOC, ID_PIOC, PIO_PC13, PIO_IT_EDGE, Start_Button);
   80ce2:	4b29      	ldr	r3, [pc, #164]	; (80d88 <avr_example+0x158>)
   80ce4:	9300      	str	r3, [sp, #0]
   80ce6:	2340      	movs	r3, #64	; 0x40
   80ce8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80cec:	210d      	movs	r1, #13
   80cee:	4620      	mov	r0, r4
   80cf0:	47a8      	blx	r5
	pio_handler_set(PIOC, ID_PIOC, PIO_PC14, PIO_IT_EDGE, Automatic);
   80cf2:	4b26      	ldr	r3, [pc, #152]	; (80d8c <avr_example+0x15c>)
   80cf4:	9300      	str	r3, [sp, #0]
   80cf6:	2340      	movs	r3, #64	; 0x40
   80cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80cfc:	210d      	movs	r1, #13
   80cfe:	4620      	mov	r0, r4
   80d00:	47a8      	blx	r5
	pio_handler_set(PIOC, ID_PIOC, PIO_PC15, PIO_IT_EDGE, Manual);
   80d02:	4b23      	ldr	r3, [pc, #140]	; (80d90 <avr_example+0x160>)
   80d04:	9300      	str	r3, [sp, #0]
   80d06:	2340      	movs	r3, #64	; 0x40
   80d08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80d0c:	210d      	movs	r1, #13
   80d0e:	4620      	mov	r0, r4
   80d10:	47a8      	blx	r5
	pio_handler_set(PIOC, ID_PIOC, PIO_PC16, PIO_IT_EDGE, Stop_Button);
   80d12:	4b20      	ldr	r3, [pc, #128]	; (80d94 <avr_example+0x164>)
   80d14:	9300      	str	r3, [sp, #0]
   80d16:	2340      	movs	r3, #64	; 0x40
   80d18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80d1c:	210d      	movs	r1, #13
   80d1e:	4620      	mov	r0, r4
   80d20:	47a8      	blx	r5
	pio_handler_set(PIOC, ID_PIOC, PIO_PC17, PIO_IT_RISE_EDGE, Encouderau);
   80d22:	4b1d      	ldr	r3, [pc, #116]	; (80d98 <avr_example+0x168>)
   80d24:	9300      	str	r3, [sp, #0]
   80d26:	2370      	movs	r3, #112	; 0x70
   80d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   80d2c:	210d      	movs	r1, #13
   80d2e:	4620      	mov	r0, r4
   80d30:	47a8      	blx	r5
	//pio_handler_set(PIOC, ID_PIOC, PIO_PC18, PIO_IT_FALL_EDGE, Encouderdec);
	
	pio_enable_interrupt(PIOC, PIO_PC12);
   80d32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80d36:	4620      	mov	r0, r4
   80d38:	4d18      	ldr	r5, [pc, #96]	; (80d9c <avr_example+0x16c>)
   80d3a:	47a8      	blx	r5
	pio_enable_interrupt(PIOC, PIO_PC13);
   80d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80d40:	4620      	mov	r0, r4
   80d42:	47a8      	blx	r5
	pio_enable_interrupt(PIOC, PIO_PC14);
   80d44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80d48:	4620      	mov	r0, r4
   80d4a:	47a8      	blx	r5
	pio_enable_interrupt(PIOC, PIO_PC15);
   80d4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   80d50:	4620      	mov	r0, r4
   80d52:	47a8      	blx	r5
	pio_enable_interrupt(PIOC, PIO_PC16);
   80d54:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   80d58:	4620      	mov	r0, r4
   80d5a:	47a8      	blx	r5
	pio_enable_interrupt(PIOC, PIO_PC17);
   80d5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   80d60:	4620      	mov	r0, r4
   80d62:	47a8      	blx	r5
   80d64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80d68:	4b0d      	ldr	r3, [pc, #52]	; (80da0 <avr_example+0x170>)
   80d6a:	601a      	str	r2, [r3, #0]
	//pio_enable_interrupt(PIOC, PIO_PC18);
	NVIC_EnableIRQ(PIOC_IRQn);

}
   80d6c:	b002      	add	sp, #8
   80d6e:	bd70      	pop	{r4, r5, r6, pc}
   80d70:	0008057d 	.word	0x0008057d
   80d74:	400e1200 	.word	0x400e1200
   80d78:	00080433 	.word	0x00080433
   80d7c:	00080401 	.word	0x00080401
   80d80:	000807dd 	.word	0x000807dd
   80d84:	000802dd 	.word	0x000802dd
   80d88:	00080c11 	.word	0x00080c11
   80d8c:	00080875 	.word	0x00080875
   80d90:	00080809 	.word	0x00080809
   80d94:	000807c9 	.word	0x000807c9
   80d98:	000808e1 	.word	0x000808e1
   80d9c:	00080487 	.word	0x00080487
   80da0:	e000e100 	.word	0xe000e100

00080da4 <port_init>:
void port_init()
{
   80da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80da8:	492e      	ldr	r1, [pc, #184]	; (80e64 <port_init+0xc0>)
   80daa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   80dae:	610b      	str	r3, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80db0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80db4:	4a2c      	ldr	r2, [pc, #176]	; (80e68 <port_init+0xc4>)
   80db6:	f44f 1b00 	mov.w	fp, #2097152	; 0x200000
   80dba:	f8c2 b010 	str.w	fp, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80dbe:	f8c2 b0a0 	str.w	fp, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80dc2:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
   80dc6:	f8c2 a010 	str.w	sl, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80dca:	f8c2 a0a0 	str.w	sl, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80dce:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
   80dd2:	f8c2 9010 	str.w	r9, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80dd6:	f8c2 90a0 	str.w	r9, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80dda:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   80dde:	f8c2 8010 	str.w	r8, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80de2:	f8c2 80a0 	str.w	r8, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80de6:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
   80dea:	f8c1 c010 	str.w	ip, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80dee:	f8c1 c0a0 	str.w	ip, [r1, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80df2:	481e      	ldr	r0, [pc, #120]	; (80e6c <port_init+0xc8>)
   80df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   80df8:	6103      	str	r3, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80dfa:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80dfe:	4b1c      	ldr	r3, [pc, #112]	; (80e70 <port_init+0xcc>)
   80e00:	f04f 0e02 	mov.w	lr, #2
   80e04:	f8c3 e010 	str.w	lr, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80e08:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80e0c:	2701      	movs	r7, #1
   80e0e:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80e10:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80e14:	2604      	movs	r6, #4
   80e16:	611e      	str	r6, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80e18:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80e1c:	2508      	movs	r5, #8
   80e1e:	611d      	str	r5, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80e20:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80e24:	2440      	movs	r4, #64	; 0x40
   80e26:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80e28:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80e2c:	f44f 7400 	mov.w	r4, #512	; 0x200
   80e30:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80e32:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80e36:	f8c2 b030 	str.w	fp, [r2, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80e3a:	f8c2 a034 	str.w	sl, [r2, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80e3e:	f8c2 9030 	str.w	r9, [r2, #48]	; 0x30
   80e42:	f8c2 8030 	str.w	r8, [r2, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80e46:	f8c1 c034 	str.w	ip, [r1, #52]	; 0x34
   80e4a:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
   80e4e:	635f      	str	r7, [r3, #52]	; 0x34
   80e50:	635e      	str	r6, [r3, #52]	; 0x34
   80e52:	635d      	str	r5, [r3, #52]	; 0x34
   80e54:	635c      	str	r4, [r3, #52]	; 0x34
   80e56:	2240      	movs	r2, #64	; 0x40
   80e58:	635a      	str	r2, [r3, #52]	; 0x34
   80e5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   80e5e:	6343      	str	r3, [r0, #52]	; 0x34
   80e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e64:	400e1000 	.word	0x400e1000
   80e68:	400e1200 	.word	0x400e1200
   80e6c:	400e0e00 	.word	0x400e0e00
   80e70:	400e1400 	.word	0x400e1400

00080e74 <main>:
	ioport_set_pin_level(Ldecrementa, IOPORT_PIN_LEVEL_LOW);


}
int main (void)
{
   80e74:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   80e76:	4b1b      	ldr	r3, [pc, #108]	; (80ee4 <main+0x70>)
   80e78:	4798      	blx	r3
	board_init();
   80e7a:	4b1b      	ldr	r3, [pc, #108]	; (80ee8 <main+0x74>)
   80e7c:	4798      	blx	r3

	
WDT->WDT_MR = WDT_MR_WDDIS;
   80e7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80e82:	4b1a      	ldr	r3, [pc, #104]	; (80eec <main+0x78>)
   80e84:	605a      	str	r2, [r3, #4]
//ioport_init();
avr_example();
   80e86:	4b1a      	ldr	r3, [pc, #104]	; (80ef0 <main+0x7c>)
   80e88:	4798      	blx	r3
port_init();
   80e8a:	4b1a      	ldr	r3, [pc, #104]	; (80ef4 <main+0x80>)
   80e8c:	4798      	blx	r3
adc_setup();
   80e8e:	4b1a      	ldr	r3, [pc, #104]	; (80ef8 <main+0x84>)
   80e90:	4798      	blx	r3
   80e92:	2220      	movs	r2, #32
   80e94:	4b19      	ldr	r3, [pc, #100]	; (80efc <main+0x88>)
   80e96:	605a      	str	r2, [r3, #4]
NVIC_EnableIRQ(ADC_IRQn);

//printf("ADC ready.\r");

adc_start(ADC);
   80e98:	4819      	ldr	r0, [pc, #100]	; (80f00 <main+0x8c>)
   80e9a:	4b1a      	ldr	r3, [pc, #104]	; (80f04 <main+0x90>)
   80e9c:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80e9e:	4a1a      	ldr	r2, [pc, #104]	; (80f08 <main+0x94>)
   80ea0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c

//InitPIO();
//otherPio();

pin_val=ioport_get_pin_level(valueaumenta);
   80ea2:	f3c3 4340 	ubfx	r3, r3, #17, #1
   80ea6:	4919      	ldr	r1, [pc, #100]	; (80f0c <main+0x98>)
   80ea8:	700b      	strb	r3, [r1, #0]
   80eaa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
pin_val2=ioport_get_pin_level(valuedecrementa);
   80eac:	f3c3 4380 	ubfx	r3, r3, #18, #1
   80eb0:	4a17      	ldr	r2, [pc, #92]	; (80f10 <main+0x9c>)
   80eb2:	7013      	strb	r3, [r2, #0]
	{
		estado=1;
	}

}*/
jogger=0;
   80eb4:	2200      	movs	r2, #0
   80eb6:	4b17      	ldr	r3, [pc, #92]	; (80f14 <main+0xa0>)
   80eb8:	601a      	str	r2, [r3, #0]
estado=2;
   80eba:	2202      	movs	r2, #2
   80ebc:	4b16      	ldr	r3, [pc, #88]	; (80f18 <main+0xa4>)
   80ebe:	601a      	str	r2, [r3, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80ec0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80ec4:	4b15      	ldr	r3, [pc, #84]	; (80f1c <main+0xa8>)
   80ec6:	631a      	str	r2, [r3, #48]	; 0x30
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   80ec8:	461c      	mov	r4, r3
			//ioport_toggle_pin_level(LManual);
			
			jogger;
			ioport_toggle_pin_level(LED);

					delay_ms(1000);
   80eca:	4e15      	ldr	r6, [pc, #84]	; (80f20 <main+0xac>)
   80ecc:	4d15      	ldr	r5, [pc, #84]	; (80f24 <main+0xb0>)
   80ece:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80ed0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
		port->PIO_CODR = mask;
   80ed4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   80ed8:	bf14      	ite	ne
   80eda:	6363      	strne	r3, [r4, #52]	; 0x34
		port->PIO_SODR = mask;
   80edc:	6323      	streq	r3, [r4, #48]	; 0x30
   80ede:	4630      	mov	r0, r6
   80ee0:	47a8      	blx	r5
			jogger;
   80ee2:	e7f4      	b.n	80ece <main+0x5a>
   80ee4:	0008039d 	.word	0x0008039d
   80ee8:	000805d1 	.word	0x000805d1
   80eec:	400e1a50 	.word	0x400e1a50
   80ef0:	00080c31 	.word	0x00080c31
   80ef4:	00080da5 	.word	0x00080da5
   80ef8:	00080941 	.word	0x00080941
   80efc:	e000e100 	.word	0xe000e100
   80f00:	400c0000 	.word	0x400c0000
   80f04:	00080231 	.word	0x00080231
   80f08:	400e1200 	.word	0x400e1200
   80f0c:	2007060c 	.word	0x2007060c
   80f10:	2007060d 	.word	0x2007060d
   80f14:	20070608 	.word	0x20070608
   80f18:	20070140 	.word	0x20070140
   80f1c:	400e1000 	.word	0x400e1000
   80f20:	005b8d80 	.word	0x005b8d80
   80f24:	20070001 	.word	0x20070001

00080f28 <__libc_init_array>:
   80f28:	b570      	push	{r4, r5, r6, lr}
   80f2a:	4e0f      	ldr	r6, [pc, #60]	; (80f68 <__libc_init_array+0x40>)
   80f2c:	4d0f      	ldr	r5, [pc, #60]	; (80f6c <__libc_init_array+0x44>)
   80f2e:	1b76      	subs	r6, r6, r5
   80f30:	10b6      	asrs	r6, r6, #2
   80f32:	bf18      	it	ne
   80f34:	2400      	movne	r4, #0
   80f36:	d005      	beq.n	80f44 <__libc_init_array+0x1c>
   80f38:	3401      	adds	r4, #1
   80f3a:	f855 3b04 	ldr.w	r3, [r5], #4
   80f3e:	4798      	blx	r3
   80f40:	42a6      	cmp	r6, r4
   80f42:	d1f9      	bne.n	80f38 <__libc_init_array+0x10>
   80f44:	4e0a      	ldr	r6, [pc, #40]	; (80f70 <__libc_init_array+0x48>)
   80f46:	4d0b      	ldr	r5, [pc, #44]	; (80f74 <__libc_init_array+0x4c>)
   80f48:	f000 f898 	bl	8107c <_init>
   80f4c:	1b76      	subs	r6, r6, r5
   80f4e:	10b6      	asrs	r6, r6, #2
   80f50:	bf18      	it	ne
   80f52:	2400      	movne	r4, #0
   80f54:	d006      	beq.n	80f64 <__libc_init_array+0x3c>
   80f56:	3401      	adds	r4, #1
   80f58:	f855 3b04 	ldr.w	r3, [r5], #4
   80f5c:	4798      	blx	r3
   80f5e:	42a6      	cmp	r6, r4
   80f60:	d1f9      	bne.n	80f56 <__libc_init_array+0x2e>
   80f62:	bd70      	pop	{r4, r5, r6, pc}
   80f64:	bd70      	pop	{r4, r5, r6, pc}
   80f66:	bf00      	nop
   80f68:	00081088 	.word	0x00081088
   80f6c:	00081088 	.word	0x00081088
   80f70:	00081090 	.word	0x00081090
   80f74:	00081088 	.word	0x00081088

00080f78 <register_fini>:
   80f78:	4b02      	ldr	r3, [pc, #8]	; (80f84 <register_fini+0xc>)
   80f7a:	b113      	cbz	r3, 80f82 <register_fini+0xa>
   80f7c:	4802      	ldr	r0, [pc, #8]	; (80f88 <register_fini+0x10>)
   80f7e:	f000 b805 	b.w	80f8c <atexit>
   80f82:	4770      	bx	lr
   80f84:	00000000 	.word	0x00000000
   80f88:	00080f99 	.word	0x00080f99

00080f8c <atexit>:
   80f8c:	2300      	movs	r3, #0
   80f8e:	4601      	mov	r1, r0
   80f90:	461a      	mov	r2, r3
   80f92:	4618      	mov	r0, r3
   80f94:	f000 b81a 	b.w	80fcc <__register_exitproc>

00080f98 <__libc_fini_array>:
   80f98:	b538      	push	{r3, r4, r5, lr}
   80f9a:	4c0a      	ldr	r4, [pc, #40]	; (80fc4 <__libc_fini_array+0x2c>)
   80f9c:	4d0a      	ldr	r5, [pc, #40]	; (80fc8 <__libc_fini_array+0x30>)
   80f9e:	1b64      	subs	r4, r4, r5
   80fa0:	10a4      	asrs	r4, r4, #2
   80fa2:	d00a      	beq.n	80fba <__libc_fini_array+0x22>
   80fa4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80fa8:	3b01      	subs	r3, #1
   80faa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80fae:	3c01      	subs	r4, #1
   80fb0:	f855 3904 	ldr.w	r3, [r5], #-4
   80fb4:	4798      	blx	r3
   80fb6:	2c00      	cmp	r4, #0
   80fb8:	d1f9      	bne.n	80fae <__libc_fini_array+0x16>
   80fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80fbe:	f000 b867 	b.w	81090 <_fini>
   80fc2:	bf00      	nop
   80fc4:	000810a0 	.word	0x000810a0
   80fc8:	0008109c 	.word	0x0008109c

00080fcc <__register_exitproc>:
   80fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80fd0:	4c27      	ldr	r4, [pc, #156]	; (81070 <__register_exitproc+0xa4>)
   80fd2:	4607      	mov	r7, r0
   80fd4:	6826      	ldr	r6, [r4, #0]
   80fd6:	4688      	mov	r8, r1
   80fd8:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   80fdc:	4692      	mov	sl, r2
   80fde:	4699      	mov	r9, r3
   80fe0:	2c00      	cmp	r4, #0
   80fe2:	d03c      	beq.n	8105e <__register_exitproc+0x92>
   80fe4:	6865      	ldr	r5, [r4, #4]
   80fe6:	2d1f      	cmp	r5, #31
   80fe8:	dc1a      	bgt.n	81020 <__register_exitproc+0x54>
   80fea:	f105 0e01 	add.w	lr, r5, #1
   80fee:	b17f      	cbz	r7, 81010 <__register_exitproc+0x44>
   80ff0:	2001      	movs	r0, #1
   80ff2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   80ff6:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   80ffa:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
   80ffe:	fa00 f205 	lsl.w	r2, r0, r5
   81002:	4311      	orrs	r1, r2
   81004:	2f02      	cmp	r7, #2
   81006:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
   8100a:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   8100e:	d020      	beq.n	81052 <__register_exitproc+0x86>
   81010:	3502      	adds	r5, #2
   81012:	f8c4 e004 	str.w	lr, [r4, #4]
   81016:	2000      	movs	r0, #0
   81018:	f844 8025 	str.w	r8, [r4, r5, lsl #2]
   8101c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81020:	4b14      	ldr	r3, [pc, #80]	; (81074 <__register_exitproc+0xa8>)
   81022:	b30b      	cbz	r3, 81068 <__register_exitproc+0x9c>
   81024:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81028:	f3af 8000 	nop.w
   8102c:	4604      	mov	r4, r0
   8102e:	b1d8      	cbz	r0, 81068 <__register_exitproc+0x9c>
   81030:	2000      	movs	r0, #0
   81032:	f8d6 3148 	ldr.w	r3, [r6, #328]	; 0x148
   81036:	f04f 0e01 	mov.w	lr, #1
   8103a:	6060      	str	r0, [r4, #4]
   8103c:	6023      	str	r3, [r4, #0]
   8103e:	4605      	mov	r5, r0
   81040:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   81044:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   81048:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8104c:	2f00      	cmp	r7, #0
   8104e:	d0df      	beq.n	81010 <__register_exitproc+0x44>
   81050:	e7ce      	b.n	80ff0 <__register_exitproc+0x24>
   81052:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   81056:	431a      	orrs	r2, r3
   81058:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8105c:	e7d8      	b.n	81010 <__register_exitproc+0x44>
   8105e:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   81062:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   81066:	e7bd      	b.n	80fe4 <__register_exitproc+0x18>
   81068:	f04f 30ff 	mov.w	r0, #4294967295
   8106c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81070:	00081078 	.word	0x00081078
   81074:	00000000 	.word	0x00000000

00081078 <_global_impure_ptr>:
   81078:	20070148                                H.. 

0008107c <_init>:
   8107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8107e:	bf00      	nop
   81080:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81082:	bc08      	pop	{r3}
   81084:	469e      	mov	lr, r3
   81086:	4770      	bx	lr

00081088 <__init_array_start>:
   81088:	00080f79 	.word	0x00080f79

0008108c <__frame_dummy_init_array_entry>:
   8108c:	00080119                                ....

00081090 <_fini>:
   81090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81092:	bf00      	nop
   81094:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81096:	bc08      	pop	{r3}
   81098:	469e      	mov	lr, r3
   8109a:	4770      	bx	lr

0008109c <__fini_array_start>:
   8109c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070138 	.word	0x20070138

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <SystemCoreClock>:
20070138:	003d0900                                ..=.

2007013c <ch_list>:
2007013c:	04050607                                ....

20070140 <estado>:
20070140:	00000002 00000000                       ........

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...
